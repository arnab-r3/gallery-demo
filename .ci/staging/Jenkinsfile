@Library('existing-build-control')
import static com.r3.build.BuildControl.killAllExistingBuildsForJob
killAllExistingBuildsForJob(env.JOB_NAME, env.BUILD_NUMBER.toInteger())

pipeline {

    agent {
        dockerfile {
            filename '.ci/staging/Dockerfile'
            additionalBuildArgs "--build-arg USER=stresstester"
            args '-v /var/run/docker.sock:/var/run/docker.sock --group-add 999'
        }
    }

    options { timestamps() }

    environment {
        ARTIFACTORY_CREDENTIALS = credentials('artifactory-credentials')
        DOCKER_CREDENTIALS = credentials('payments-docker-credentials')
        DOCKER_REGISTRY = "r3payments.azurecr.io"
        LOOPBACK_ADDRESS = "172.17.0.1"
    }

    stages {

        stage('Unit Tests') {
            steps {
                sh "./gradlew test"
            }
         }

        stage('Integration Tests') {
            steps {
                sh "./gradlew integrationTest"
            }
        }

        stage('Docker image pull') {
            steps {
                timeout(60) {
                    sh '''
                        docker pull postgres:9.6
                        docker pull roastario/freighter-base:latest
                        docker pull roastario/notary-and-network-map:4.0
                        '''
                }
            }
        }

        stage('Freighter Tests') {
            steps {
                timeout(60) {
                    sh '''
                        export ARTIFACTORY_USERNAME=\"\${ARTIFACTORY_CREDENTIALS_USR}\"
                        export ARTIFACTORY_PASSWORD=\"\${ARTIFACTORY_CREDENTIALS_PSW}\"
                        ./gradlew --parallel -Pfreighter.forks=2 freighterTest --info --stacktrace --no-daemon
                        '''
                }
            }
        }

        stage('Build Deployment') {
            steps {
                sh "./gradlew buildDevDeployment -Pdocker.push.registry=\${DOCKER_REGISTRY} " +
                        "-Pdocker.push.username=\"\${DOCKER_CREDENTIALS_USR}\" -Pdocker.push.password=\"\${DOCKER_CREDENTIALS_PSW}\""
            }
        }

        //TODO: kubectl apply -f build/kubernetes/ledgerswaps.yaml
        stage('Deploy to Azure') {
            steps {
                withCredentials([azureServicePrincipal("payments-deployer-service-principal")]) {
                    sh '''
                    az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID
                    az account set -s $AZURE_SUBSCRIPTION_ID
                    az aks get-credentials --resource-group payments-dev --name payments-dev-k8s
                  '''
                }
            }
        }

    }

    post {
        always {
            junit '**/build/test-results/**/*.xml'
            archiveArtifacts artifacts: '**/build/kubernetes/*.yaml'
        }

        cleanup {
            deleteDir() /* clean up our workspace */
        }
    }
}