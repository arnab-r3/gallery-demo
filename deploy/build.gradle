apply plugin: "net.corda.plugins.cordapp"
apply plugin: "net.corda.plugins.cordformation"
apply plugin: 'net.corda.plugins.quasar-utils'
apply from: "./docker.gradle"

rootProject.ext.corda_release_version = cordaCoreVersion // required for cordform

dependencies {
    cordaRuntime "$cordaCoreReleaseGroup:corda:$cordaCoreVersion"
    cordaCompile "$cordaCoreReleaseGroup:corda-node-api:$cordaCoreVersion"

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4jVersion"

    cordapp project(":gallery-contracts")
    cordapp project(":gallery-workflows")
    project(":spring-api")
}

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

String sourceNodeDir = "$project.buildDir/nodes"
String basicNodeDir = "$project.buildDir/BasicNet-Nodes"
String auctionNodeDir = "$project.buildDir/Auction-Nodes"
String gbpNodeDir = "$project.buildDir/GBP-Nodes"
String cbdcNodeDir = "$project.buildDir/CBDC-Nodes"
List<String> allNetworks = [auctionNodeDir, gbpNodeDir, cbdcNodeDir]

/**
 * Task for single network local deployment for basic initial testing
 */
task deployNodes(type: net.corda.plugins.Cordform, dependsOn: [':gallery-contracts:jar', ':gallery-workflows:jar']) {
    group = "deployment"

    directory basicNodeDir
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(":gallery-contracts")
        cordapp project(":gallery-workflows")
    }
    signing {
        enabled false
    }
    node {
        name "O=DN Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10004")
        }
        cordapps = []
    }
    node {
        name "O=Alice,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10007")
        }
        extraConfig = [
                h2Settings: [ address: 'localhost:10008' ]
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Bob,L=San Francisco,C=US"
        p2pPort 10009
        rpcSettings {
            address("localhost:10010")
            adminAddress("localhost:10011")
        }
        extraConfig = [
                h2Settings: [ address: 'localhost:10012' ]
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Charlie,L=Mumbai,C=IN"
        p2pPort 10013
        rpcSettings {
            address("localhost:10014")
            adminAddress("localhost:10015")
        }
        extraConfig = [
                h2Settings: [ address: 'localhost:10016' ]
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}

/**
 * Create docker-compose for Auction Network - Alice, Bob, Charlie
 *
 * Todo: Test and resolve H2 live jdbc connect
 */
task prepareAuctionDockerNodes(type: net.corda.plugins.Dockerform, dependsOn: [':gallery-contracts:jar', ':gallery-workflows:jar']) {
    group = "deployment"

    dockerImage = "corda/corda-zulu-java1.8-" + corda_release_version + ":latest"

    def depTargetDir = auctionNodeDir
    directory depTargetDir
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(":gallery-contracts")
        cordapp project(":gallery-workflows")
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
        //        runSchemaMigration = true
    }

    node {
        name "O=Auction Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10017
        p2pAddress "0.0.0.0"
        rpcSettings {
            address("0.0.0.0:10018")
            adminAddress("0.0.0.0:10019")
        }
        sshdPort 2221
    }

    node {
        name "O=Alice,L=London,C=GB"
        p2pPort 10002
        p2pAddress "0.0.0.0"
        rpcSettings {
            address("0.0.0.0:10020")
            adminAddress("0.0.0.0:10021")
        }
        extraConfig = [
                h2Settings: [ address: 'localhost:10022' ],
                dataSourceProperties: [
                    dataSource: [
                        password: "test"
                    ]
                ]
        ]
        sshdPort 2222
    }

    node {
        name "O=Bob,L=San Francisco,C=US"
        p2pPort 10002
        p2pAddress "0.0.0.0"
        rpcSettings {
            address("0.0.0.0:10023")
            adminAddress("0.0.0.0:10024")
        }
        extraConfig = [
                h2Settings: [ address: '0.0.0.0:10025' ],
                dataSourceProperties: [
                        dataSource: [
                                password: "test"
                        ]
                ]
        ]
        sshdPort 2223
    }

    node {
        name "O=Charlie,L=Mumbai,C=IN"
        p2pPort 10003
        p2pAddress "0.0.0.0"
        rpcSettings {
            address("0.0.0.0:10026")
            adminAddress("0.0.0.0:10027")
        }
        extraConfig = [
                h2Settings: [ address: "0.0.0.0:10028" ],
                dataSourceProperties: [
                        dataSource: [
                                password: "test"
                        ]
                ]
        ]
        sshdPort 2224
    }

    doLast {
        mvYamlToTarget(sourceNodeDir, depTargetDir)
    }
}

/**
 * Create docker-compose for GBP Network - Alice, Bob
 */
task prepareGbpDockerNodes(type: net.corda.plugins.Dockerform, dependsOn: [':gallery-contracts:jar', ':gallery-workflows:jar']) {
    group = "deployment"

    dockerImage = "corda/corda-zulu-java1.8-" + corda_release_version + ":latest"

    def depTargetDir = gbpNodeDir
    directory depTargetDir
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(":gallery-contracts")
        cordapp project(":gallery-workflows")
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
        //        runSchemaMigration = true
    }

    node {
        name "O=GBP Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10017
        p2pAddress "0.0.0.0"
        rpcSettings {
            address("0.0.0.0:10029")
            adminAddress("0.0.0.0:10030")
        }
        sshdPort 2225
    }

    node {
        name "O=Alice,L=London,C=GB"
        p2pPort 10002
        p2pAddress "0.0.0.0"
        rpcSettings {
            address("0.0.0.0:10031")
            adminAddress("0.0.0.0:10032")
        }
        extraConfig = [
                h2Settings: [ address: 'localhost:10033' ],
                dataSourceProperties: [
                        dataSource: [
                                password: "test"
                        ]
                ]
        ]
        sshdPort 2226
    }

    node {
        name "O=Bob,L=San Francisco,C=US"
        p2pPort 10002
        p2pAddress "0.0.0.0"
        rpcSettings {
            address("0.0.0.0:10034")
            adminAddress("0.0.0.0:10035")
        }
        extraConfig = [
                h2Settings: [ address: '0.0.0.0:10036' ],
                dataSourceProperties: [
                        dataSource: [
                                password: "test"
                        ]
                ]
        ]
        sshdPort 2227
    }

    doLast {
        mvYamlToTarget(sourceNodeDir, depTargetDir)
    }
}

/**
 * Create docker-compose for CBDC Network - Alice, Charlie
 */
task prepareCbdcDockerNodes(type: net.corda.plugins.Dockerform, dependsOn: [':gallery-contracts:jar', ':gallery-workflows:jar']) {
    group = "deployment"

    dockerImage = "corda/corda-zulu-java1.8-" + corda_release_version + ":latest"

    def depTargetDir = cbdcNodeDir
    directory depTargetDir
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(":gallery-contracts")
        cordapp project(":gallery-workflows")
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
        //        runSchemaMigration = true
    }

    node {
        name "O=CBDC Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10017
        p2pAddress "0.0.0.0"
        rpcSettings {
            address("0.0.0.0:10037")
            adminAddress("0.0.0.0:10038")
        }
        sshdPort 2228
    }

    node {
        name "O=Alice,L=London,C=GB"
        p2pPort 10002
        p2pAddress "0.0.0.0"
        rpcSettings {
            address("0.0.0.0:10039")
            adminAddress("0.0.0.0:10040")
        }
        extraConfig = [
                h2Settings: [ address: 'localhost:10041' ],
                dataSourceProperties: [
                        dataSource: [
                                password: "test"
                        ]
                ]
        ]
        sshdPort 2229
    }

    node {
        name "O=Charlie,L=Mumbai,C=IN"
        p2pPort 10002
        p2pAddress "0.0.0.0"
        rpcSettings {
            address("0.0.0.0:10042")
            adminAddress("0.0.0.0:10043")
        }
        extraConfig = [
                h2Settings: [ address: '0.0.0.0:10044' ],
                dataSourceProperties: [
                        dataSource: [
                                password: "test"
                        ]
                ]
        ]
        sshdPort 2230
    }

    doLast {
        mvYamlToTarget(sourceNodeDir, depTargetDir)
    }
}

/**
 * Generates all networks
 */
task prepareAllDockerNodes(type: Task, dependsOn: ['prepareAuctionDockerNodes','prepareGbpDockerNodes','prepareCbdcDockerNodes']) {
    group = "deployment"
}

// RUNNERS

/**
 * Convenience task for bringing up all docker networks
 */
task allNetworksUp(type: Task) {
    group = "deployment"

    doLast {
        allNetworks.forEach({ network ->
            exec {
                environment "ACCEPT_LICENSE", "YES"
                workingDir network
                commandLine 'docker-compose', '-f', "$network/docker-compose.yml", 'up', '--remove-orphans', '-d'
            }
        })
    }
}

/**
 * Convenience task for bringing down all docker networks
 */
task allNetworksDown(type: Task) {
    group = "deployment"

    doLast {
        allNetworks.forEach({network ->
            exec {
                environment "ACCEPT_LICENSE", "YES"
                workingDir network
                commandLine 'docker-compose', '-f', "$network/docker-compose.yml", 'down', '--remove-orphans'
            }
        })
    }
}

/**
 * Helper that moves a network/nodes deployment to its own build directory
 * @param source
 * @param target
 * @return
 */
def mvYamlToTarget(String source, String target) {
    File srcFile = new File(source)
    copy {
        from(source) {
            include '**/docker-compose.yml'
        }
        into(target)
        filter {
            // Correction of Dockerform incorrect mnt path generations
            line -> line.replaceAll(source, target)
        }
    }
    srcFile.deleteDir()
}
